---
description: 
globs: 
alwaysApply: true
---
This is a web application that enables developers to quickly create so called "rules for AI" used by tools such as GitHub Copilot, Cursor and Windsurf, through an interactive, visual interface.

Key business requirements include: [project-prd.md](mdc:.ai/project-prd.md)

## Tech Stack

[tech-stack.md](mdc:.ai/tech-stack.md)

## Project Structure

When introducing changes to the project, always follow the directory structure below:

- `./src` - source code
- `./src/layouts` - Astro layouts
- `./src/pages` - Astro pages
- `./src/pages/api` - API endpoints
- `./src/db` - database client and schema (Supabase)
- `./src/middleware` - Astro middlewares
- `./src/components` - client-side components written in Astro (static) and React (dynamic)
- `./src/store` - state management (Zustand)
- `./src/assets` - static internal assets
- `./public` - public assets

When modifying the directory structure, always update this section.

## Guidelines

### Astro & React Components

- Use React for dynamic components and Astro for static components
- Unless the component requires interactivity, generate Astro components
- Prefer hooks whenever there's custom logic
- Use React function components over classes

### TypeScript

- Use TypeScript with sound types and avoid any
- For dictionary values, use `enum`

### State management

- Use Zustand for state management
- Create dedicated stores for each domain

### Project references

- When referencing Github, always use 'przeprogramowani' organization and 'ai-rules-builder' repository

### UI & Styles
- Always use Tailwind 4 to add styles to components (both React and Astro)
- Always apply styles inspired by dark mode as default theme
- UI should be influenced by Fluent 2.0 design system
- Use lucide-react instead of inline svg
- Use 'size-\*' class in Tailwind when height and width are the same