---
description: 
globs: 
alwaysApply: false
---
You are a UX specialist tasked with creating a Mermaid diagram to visualize the user journey for a login and registration module. The diagram should be created in the following file:

You will need to reference the following files for existing requirements:

<file_references>
[project-prd.md](mdc:.ai/project-prd.md)
</file_references>

<destination>
.ai/diagrams/journey.md
</destination>

Your task is to analyze the specification of the login and registration module and create a comprehensive Mermaid diagram that accurately represents the user journey. The diagram should be in Polish language.

Before creating the diagram, please analyze the requirements and plan your approach. Wrap your analysis inside <user_journey_analysis> tags. In this analysis:

1. List out all the user paths mentioned in the file references.
2. Identify the main journeys and their corresponding states.
3. Outline the decision points and alternative paths.
4. Provide a brief description of each state's purpose.

When you're ready to create the diagram, please follow these guidelines:

1. Start the diagram with the following syntax:

   ```mermaid
   stateDiagram-v2
   ```

2. Include the following elements in your diagram:

   - User paths based on existing requirements
   - Using the application as a non-logged-in user
   - Accessing the main application functionality
   - Logging in
   - Creating an account
   - Password recovery
   - High-level user journey aligned with project requirements and USER STORIES
   - Decision points and alternative paths
   - Flow after email verification
   - Focus on business paths, not technical aspects

3. Follow these Mermaid syntax rules:

   - Start and end states must be properly defined:
     ```
     [*] --> StronaGlowna
     StronaGlowna --> [*]
     ```
   - Use compound states for grouping related states:
     ```
     state "Proces Rejestracji" as Rejestracja {
       [*] --> FormularzRejestracji
       FormularzRejestracji --> WalidacjaDanych
       WalidacjaDanych --> WyslanieMaila
     }
     ```
   - For decision branches, use the correct syntax:
     ```
     state if_weryfikacja <<choice>>
     WeryfikacjaTokena --> if_weryfikacja
     if_weryfikacja --> TokenPoprawny: Token OK
     if_weryfikacja --> TokenNiepoprawny: Token błędny
     ```
   - Use notes for additional information:
     ```
     FormularzLogowania: Użytkownik może się zalogować
     note right of FormularzLogowania
       Formularz zawiera pola email i hasło
       oraz link do odzyskiwania hasła
     end note
     ```
   - For parallel states, use the correct syntax:

     ```
     state fork_state <<fork>>
     state join_state <<join>>

     Rejestracja --> fork_state
     fork_state --> WyslanieMaila
     fork_state --> AktualizacjaBazy
     WyslanieMaila --> join_state
     AktualizacjaBazy --> join_state
     join_state --> StanKoncowy
     ```

   - Use namespaces for organizing complex diagrams:
     ```
     state "Autentykacja" as Autentykacja {
       state "Logowanie" as Logowanie {
         // stany dla procesu logowania
       }
       state "Rejestracja" as Rejestracja {
         // stany dla procesu rejestracji
       }
     }
     ```
   - For state history, use the correct syntax:
     ```
     state "Panel użytkownika" as Panel {
       [*] --> historia
       state historia <<history>>
     }
     ```
   - For transitions with events and conditions, use the correct syntax:
     ```
     StanA --> StanB: Przycisk Dalej [dane poprawne]
     ```
   - Avoid using URLs, endpoint addresses, brackets, long function names, or complex expressions in state names:
     BAD: [Strona Główna<br/>(Kreator Reguł)]
     GOOD: [Kreator Reguł]
   - Use consistent naming throughout the document
   - Avoid long labels that may cause rendering issues

4. Avoid these common errors:
   - Missing Mermaid section declaration and diagram type at the beginning
   - Incorrect decision states (missing choice, fork, join)
   - Missing start and end states ([*])
   - Inconsistent state naming
   - Unclosed nested states (missing closing curly brace)
   - Overly complex diagrams without proper state grouping
   - Incorrect transition labels
   - Exceeding line length limits
   - Missing empty lines before and after the Mermaid code block

After creating the diagram, please review it carefully to ensure there are no syntax errors or rendering issues. Make any necessary adjustments to improve clarity and accuracy.

When you're ready to present the final diagram, please use <mermaid_diagram> tags to enclose it.
