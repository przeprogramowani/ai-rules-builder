---
description: 
globs: 
alwaysApply: false
---
You are a security specialist tasked with creating a Mermaid diagram to visualize the authentication flow for a login and registration module. The diagram should be created in the following file:

You will need to reference the following files for existing requirements:

<file_references>
[project-prd.md](mdc:.ai/project-prd.md)
</file_references>

<destination>
.ai/diagrams/auth.md
</destination>

Your task is to analyze the specification of the login and registration module and create a comprehensive Mermaid diagram that accurately represents the authentication sequence. The diagram should be in Polish language.

Before creating the diagram, please analyze the requirements and plan your approach. Wrap your analysis inside <authentication_analysis> tags. In this analysis:

1. List out all the authentication flows mentioned in the file references.
2. Identify the main actors and their interactions.
3. Outline the token verification and refresh processes.
4. Provide a brief description of each authentication step.

When you're ready to create the diagram, please follow these guidelines:

1. Start the diagram with the following syntax:

   ```mermaid
   sequenceDiagram
   ```

2. Include the following elements in your diagram:

   - The full lifecycle of the authentication process in a modern application using React, Astro, and Supabase Auth
   - Communication between actors: 1) Browser 2) Middleware 3) Astro API 4) Supabase Auth
   - Clear points where user redirection or token verification occurs
   - Data flow after implementing new authentication requirements
   - How the user session works after login and how the system responds to token expiration
   - Token refresh process and protection against unauthorized access

3. Follow these Mermaid syntax rules:

   - Use the `autonumber` attribute for clarity of step sequence
   - Maintain consistent spacing between elements for diagram readability
   - Always use `participant` to declare actors before starting the sequence
   - Remember the correct order of elements in a sequence (sender, arrow, receiver)
   - Use proper activation and deactivation cycle of diagram elements
   - Use appropriate arrow types:
     - `->` for regular arrows (e.g., `Browser->API`)
     - `-->` for dashed arrows (e.g., `API-->Browser: Token expired`)
     - `->>` for arrows with empty arrowheads (e.g., `Browser->>Auth: Login request`)
     - `-->>` for dashed arrows with empty arrowheads
   - For activation blocks, correctly use `activate` and `deactivate`:
     ```
     activate Browser
     Browser->>API: Request data
     deactivate Browser
     ```
   - Use `alt`/`else`/`end` for conditional paths:
     ```
     alt Authentication successful
       Browser->>Dashboard: Redirect to dashboard
     else Authentication failed
       Browser->>LoginPage: Show error message
     end
     ```
   - For parallel actions, use `par`/`and`/`end`:
     ```
     par Send confirmation email
       API->>EmailService: Send verification
     and Update user status
       API->>Database: Update status
     end
     ```
   - For multi-line notes, use the correct syntax:
     ```
     Note over Browser,API: Ten tekst pojawi się
     w notatce obejmującej oba elementy
     ```
   - DO NOT exceed 80 characters in a single line of Mermaid code
   - DO NOT include URLs, endpoint addresses, brackets, long function names, or complex expressions in diagram names:
     BAD: [Strona Główna<br/>(Kreator Reguł)]
     GOOD: [Kreator Reguł]
   - Use consistent naming throughout the document

4. Avoid these common errors:
   - Missing Mermaid section declaration and diagram type at the beginning
   - Incorrect arrow syntax (e.g., -> instead of ->>)
   - Using disallowed characters in identifiers without enclosing them in quotes
   - Unbalanced code blocks (missing end for started blocks)
   - Exceeding line length limits
   - Incorrect nesting of conditional blocks

After creating the diagram, please review it carefully to ensure there are no syntax errors or rendering issues. Make any necessary adjustments to improve clarity and accuracy.

When you're ready to present the final diagram, please use <mermaid_diagram> tags to enclose it.
