---
description: 
globs: 
alwaysApply: false
---
You are a skilled software architect tasked with creating a Mermaid diagram to visualize the architecture of Astro pages and React components for a login and registration module. The diagram should be created in the following file:

You will need to reference the following files for existing components:

<file_references>
[project-prd.md](mdc:.ai/project-prd.md)
</file_references>

<destination>
.ai/diagrams/ui.md
</destination>

Your task is to analyze the specification of the login and registration module and create a comprehensive Mermaid diagram that accurately represents the system architecture. The diagram should be in Polish language.

Before creating the diagram, please analyze the requirements and plan your approach. Wrap your analysis inside <architecture_analysis> tags. In this analysis:

1. List out all the components mentioned in the file references.
2. Identify the main pages and their corresponding components.
3. Outline the data flow between components.
4. Provide a brief description of each component's functionality.

When you're ready to create the diagram, please follow these guidelines:

1. Start the diagram with the following syntax:
   ```mermaid
   flowchart TD
   ```

2. Include the following elements in your diagram:
   - Updated UI structure after implementing new requirements
   - Layouts, server pages, and updates to existing components
   - Grouping of elements by functionality
   - Data flow direction between components
   - Modules responsible for application state
   - Division into shared components and page-specific components
   - Dependencies between authentication-related components and the rest of the application
   - Highlight components that required updates due to new requirements

3. Follow these Mermaid syntax rules:
   - Use consistent node ID formatting:
     ```
     A[Panel Główny] --> B[Formularz Logowania]
     B --> C[Walidacja Danych]
     ```
   - Remember that node IDs are case-sensitive and must be unique
   - Use correct node shapes:
     - `[Tekst]` for rectangles
     - `(Tekst)` for rounded rectangles
     - `((Tekst))` for circles
     - `{Tekst}` for diamonds
     - `>Tekst]` for flags
     - `[[Tekst]]` for subroutines
   - Group related elements using subgraphs:
     ```
     subgraph "Moduł Autentykacji"
       A[Formularz Logowania]
       B[Walidacja Danych]
       C[Zarządzanie Sesją]
     end
     ```
   - Use intermediate nodes for complex relationships instead of complicated connections
   - Prefer vertical layout for hierarchy and horizontal for process flow
   - Use correct connection types:
     - `-->` for standard arrows
     - `---` for lines without arrows
     - `-.->` for dotted lines with arrows
     - `==>` for thick lines with arrows
     - `--Tekst-->` for arrows with labels
   - Avoid using URLs, endpoint addresses, brackets, long function names, or complex expressions in node names
   - Use consistent naming throughout the document
   - Avoid long labels that may cause rendering issues
   - Use quotes for text containing spaces:
     ```
     A["Komponent Autentykacji"] --> B["Zarządzanie Stanem"]
     ```
   - For node styling, use the correct syntax:
     ```
     A:::styleClass --> B
     ```
     with class definition:
     ```
     classDef styleClass fill:#f96,stroke:#333,stroke-width:2px;
     ```

4. Avoid these common errors:
   - Missing Mermaid section declaration and diagram type at the beginning
   - Invalid node IDs (containing disallowed characters)
   - Unclosed subgraphs (missing "end" for a started "subgraph")
   - Unclosed square brackets in node descriptions
   - Inconsistent flow directions (mixing TD and LR without justification)
   - Overly complex diagrams without proper grouping
   - Overlapping labels and connections

After creating the diagram, please review it carefully to ensure there are no syntax errors or rendering issues. Make any necessary adjustments to improve clarity and accuracy.

When you're ready to present the final diagram, please use <mermaid_diagram> tags to enclose it.